package biz.com.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.io.*;
import java.util.*;
import java.io.*;
import java.util.*;
import java.util.Map.Entry;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemIterator;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.output.*;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.output.*;

import jxl.*;
import jxl.write.*;
import jxl.write.biff.*;

import javax.jcr.ItemExistsException;
import javax.jcr.LoginException;
import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.PathNotFoundException;
import javax.jcr.PropertyIterator;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;
import javax.jcr.Workspace;
import javax.jcr.lock.LockException;
import javax.jcr.nodetype.ConstraintViolationException;
import javax.jcr.nodetype.NoSuchNodeTypeException;
import javax.jcr.query.Query;
import javax.jcr.query.QueryResult;
import javax.jcr.version.VersionException;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Properties;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;
import javax.servlet.ServletException;

import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.jcr.api.SlingRepository;
import org.apache.sling.api.request.RequestParameter;
import org.apache.sling.api.request.RequestParameterMap;

import biz.com.service.ProductService;
import biz.com.service.TemplateDataBean;

//import biz.com.service.WriteException;

/**
 * 
 * @author atul
 */
@SuppressWarnings("unused")
@Component(configurationFactory = true)
@Service(ProductService.class)
@Properties({ @Property(name = "com", value = "com") })
public class ProductServiceImpl implements ProductService {

	/** The repo variable is an object of SlingRepository interface. */

	@Reference
	private SlingRepository repo;

	public ArrayList<Node> getProductList(String searchText) {
		ArrayList<Node> pb = null;
		Session session = null;
		Node tempPrdNode, childNode;

		if (!searchText.trim().equals("")) {
			try {

				pb = new ArrayList<Node>();
				session = repo.login(new SimpleCredentials("admin", "admin"
						.toCharArray()));

				// String querryStr =
				// "select * from [nt:unstructured] where  ISDESCENDANTNODE('/content/product/products/') and (contains('name','*"+searchText
				// +"*'))";
				String querryStr = "select [name] from [nt:base] where (contains('name','*"
						+ searchText
						+ "*'))  and ISDESCENDANTNODE('/content/product/products/')";

				Workspace workspace = session.getWorkspace();
				Query query = workspace.getQueryManager().createQuery(
						querryStr, Query.JCR_SQL2);
				QueryResult result = query.execute();
				NodeIterator iterator = result.getNodes();

				while (iterator.hasNext()) {

					tempPrdNode = iterator.nextNode();
					pb.add(tempPrdNode);
				}

			} catch (LoginException e) {

			} catch (RepositoryException e) {
				// TODO Auto-generated catch block

			} catch (Exception e) {
				// TODO Auto-generated catch block

			}
		}

		return pb;
	}

	public String checkModelExistence(String companyId, String ModelNo) {
		Node tempPrdNode, prodNode, childNode, prodCmpProd, prodCmpNode;
		String truevalue = "true";
		String falsevalue = "false";
		Session session = null;
		if (!ModelNo.trim().equals("")) {
			try {
				session = repo.login(new SimpleCredentials("admin", "admin"
						.toCharArray()));
				prodCmpNode = session.getRootNode().getNode("content")
						.getNode("company").getNode(companyId);
				if (prodCmpNode.hasNode("product")) {
					prodCmpProd = prodCmpNode.getNode("product");
					if (prodCmpProd.hasNodes()) {
						NodeIterator iterator = prodCmpProd.getNodes();

						while (iterator.hasNext()) {

							tempPrdNode = iterator.nextNode();
							prodNode = session.getRootNode().getNode("content")
									.getNode("product").getNode("products")
									.getNode(tempPrdNode.getName());
							if (prodNode.hasProperty("modelno")) {
								String strModelNo = prodNode.getProperty(
										"modelno").getString();
								if (strModelNo.trim().equals(ModelNo.trim())) {
									return truevalue;
								} else {
									// /return falsevalue;
								}
							} else {
								// return falsevalue;
							}
						}
					} else {
						return falsevalue;
					}
				} else {
					return falsevalue;
				}

			} catch (LoginException e) {
				return falsevalue;
			} catch (RepositoryException e) {
				// TODO Auto-generated catch block
				return falsevalue;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				return falsevalue;
			}
		}

		return falsevalue;
	}

	public ArrayList<Node> getProductListByCatId(String searchText) {
		ArrayList<Node> pb = null;

		Node tempPrdNode, childNode;
		Session session = null;
		if (!searchText.trim().equals("")) {
			try {

				pb = new ArrayList<Node>();
				session = repo.login(new SimpleCredentials("admin", "admin"
						.toCharArray()));

				String querryStr = "select * from [nt:unstructured] where  ISDESCENDANTNODE('/content/product/products/') and catid  like '"
						+ searchText + "%'";
				Workspace workspace = session.getWorkspace();
				Query query = workspace.getQueryManager().createQuery(
						querryStr, Query.JCR_SQL2);
				QueryResult result = query.execute();
				NodeIterator iterator = result.getNodes();

				while (iterator.hasNext()) {

					tempPrdNode = iterator.nextNode();
					pb.add(tempPrdNode.getParent().getParent().getParent());

				}

			} catch (LoginException e) {

			} catch (RepositoryException e) {
				// TODO Auto-generated catch block

			} catch (Exception e) {
				// TODO Auto-generated catch block

			}
		}
		return pb;
	}

	public void createTemplate(SlingHttpServletRequest request,
			SlingHttpServletResponse response, String n)
			throws RowsExceededException, IOException {
		try {
			Session session = null;
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));
			Node prodNode = session.getRootNode().getNode("content")
					.getNode("product").getNode("products").getNode(n);
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet firstSheet = workbook.createSheet(this.getClass()
					.getName());
			ArrayList<String> header = new ArrayList<String>();
			ArrayList<String> value = new ArrayList<String>();
			// response.getWriter().print(prodNode.getProperty("name"));
			header.add("Model Number");
			value.add(prodNode.getProperty("modelno").getString());
			header.add("Product Name");
			value.add(prodNode.getProperty("name").getString());
			header.add("Short Description");
			value.add(prodNode.getProperty("shortdescription").getString());
			header.add("Long Description");
			value.add(prodNode.getProperty("description").getString());
			header.add("Keyword");
			value.add(prodNode.getProperty("keyword").getString());
			header.add("Price");
			value.add(prodNode.getProperty("price").getString());
			header.add("Minimum Order Quantity");
			value.add(prodNode.getProperty("moq").getString());
			header.add("Sell By Lot");
			value.add(prodNode.getProperty("sbl").getString());

			if (prodNode.hasNode("spec")
					&& prodNode.getNode("spec").hasNode("attr")
					&& prodNode.getNode("spec").hasNode("fattr")) {
				Node spec = prodNode.getNode("spec").getNode("attr");
				Node fspec = prodNode.getNode("spec").getNode("fattr");
				NodeIterator prop = spec.getNodes();
				NodeIterator fprop = fspec.getNodes();
				while (prop.hasNext()) {
					Node p = prop.nextNode();
					header.add(p.getProperty("attrname").getString());
					header.add(p.getProperty("attrname").getString()
							+ "Minimum value");
					header.add(p.getProperty("attrname").getString()
							+ "Maximum value");
					value.add(p.getProperty("value").getString());
					value.add(p.getProperty("min").getString());
					value.add(p.getProperty("max").getString());
				}

				while (fprop.hasNext()) {
					Node p = fprop.nextNode();
					header.add(p.getProperty("attrname").getString());
					value.add(p.getProperty("value").getString());
				}
			}
			// response.getWriter().print(header.size()+"---------"+value.size());
			HSSFRow rowzero = firstSheet.createRow(0);
			HSSFRow rowone = firstSheet.createRow(1);
			for (int j = 0; j < header.size(); j++) {
				rowzero.createCell(j).setCellValue(
						new HSSFRichTextString(header.get(j)));
				rowone.createCell(j).setCellValue(
						new HSSFRichTextString(value.get(j)));

			}

			// write it as an excel attachment
			ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();

			workbook.write(outByteStream);
			byte[] outArray = outByteStream.toByteArray();
			response.setContentType("application/ms-excel");
			response.setContentLength(outArray.length);
			response.setHeader("Expires:", "0"); // eliminates browser caching
			response.setHeader("Content-Disposition",
					"attachment; filename=Template.xls");
			OutputStream outStream = response.getOutputStream();
			outStream.write(outArray);
			outStream.flush();

		} catch (Exception e) {
			response.getWriter().print("----------" + e.getMessage());
			// e.printStackTrace();
		}

	}

	public Long saveProductInfo(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws ServletException,
			IOException {
		Session session = null;
		String prod = request.getParameter("id");
		String prod1 = request.getParameter("param");
		String id = "";
		Node node = null, compNode = null, compProNode = null, supNode = null, chsupNode = null, catUnspscNode = null, catNode = null, specNode = null, prodNode = null, mediaNode = null, docNode = null, dcNode = null, videoNode = null, vidNode = null, imgNode = null, picNode = null, jcrNode = null, indNode = null, tgeoNode = null, indNodeP = null, tgeoNodeP = null;
		// Session session;
		long a = 0;
		DateFormat dateFormat = new SimpleDateFormat("MMM d,yyyy");
		Date date = new Date();
		String f = "";
		try {

			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			if (session.getRootNode().getNode("content").getNode("product")
					.hasNode("products")) {
				prodNode = session.getRootNode().getNode("content")
						.getNode("product").getNode("products");
			} else {
				prodNode = session.getRootNode().getNode("content")
						.getNode("product").addNode("products");
				prodNode.setProperty("prodCount", 0);
			}

			if (prod != null && !prod.equals("new") && prod1.equals("edit")) {
				node = prodNode.getNode(prod);
				a = Long.parseLong(prod);
				f = String.valueOf(a);
			} else {
				// response.getWriter().print("Enter--");
				Long s = prodNode.getProperty("prodCount").getLong();
				f = Long.toString(s + 1);
				node = prodNode.addNode(f);
				// node.setProperty("prodDate", dateFormat.format(date));
				a = s + 1;
				node.setProperty("prodid", s + 1);
				node.setProperty("prd_code", s + 1);
				prodNode.setProperty("prodCount", s + 1);
				// response.getWriter().print("Exit----))-"+s);
			}

			// a=prodNode.getProperty("prodCount").getLong();
			node.setProperty("name", request.getParameter("proname"));
			node.setProperty("creator", request.getRemoteUser());
			node.setProperty("modelno", request.getParameter("modelno"));
			node.setProperty("shortdescription",
					request.getParameter("proshortdesc"));
			node.setProperty("description", request.getParameter("prolongdesc"));
			node.setProperty("keyword", request.getParameter("keyword"));
			// node.setProperty("price", request.getParameter("whprice"));
			// node.setProperty("moq", request.getParameter("minorder"));
			// node.setProperty("sbl", request.getParameter("sellbylot"));
			response.getWriter().println("Path----going inside media pass)))-");

			if (node.hasNode("media")) {
				mediaNode = node.getNode("media");
				if (node.getNode("media").hasNode("images")) {
					picNode = node.getNode("media").getNode("images");
				} else {
					picNode = mediaNode.addNode("images");
				}
				if (node.getNode("media").hasNode("videoes")) {
					videoNode = node.getNode("media").getNode("videoes");
				} else {
					videoNode = mediaNode.addNode("videoes");
				}
			} else {
				mediaNode = node.addNode("media");
				picNode = mediaNode.addNode("images");
				videoNode = mediaNode.addNode("videoes");
			}
			int videoC = 0;
			int imageC = 0;
			boolean isMultipart;

			isMultipart = ServletFileUpload.isMultipartContent(request);
			response.getWriter().println("Path 1-" + isMultipart);
			// response.setContentType("text/html");
			// java.io.PrintWriter out = response.getWriter();
			if (!isMultipart) {
				// return;
			}
			DiskFileItemFactory factory = new DiskFileItemFactory();
			response.getWriter().println("Path 2-" + factory);
			// Create a new file upload handler
			ServletFileUpload upload = new ServletFileUpload(factory);
			response.getWriter().println("Path 3-" + upload);
			try {
				// Parse the request to get file items.
				// response.getWriter().println("Path 4-"+request.getParameter("upimg[]")+request.getParameter("upimg[]")+request.getParameterValues("upimg")[0]);
				if (request.getParameterMap().get("upimg") != null) {
					RequestParameter[] ap = request.getRequestParameterMap()
							.get("upimg");
					response.getWriter()
							.println(
									"oooooooooooooooooo---------"
											+ ap[0].getFileName());
					// List fileItems = upload.parseRequest(request);
				}

				// List fileItems = request.getParameter("upimg");
				// response.getWriter().println("Path 4-"+fileItems);
				// if(fileItems!=null){
				// response.getWriter().println("Hi i am not nulll");
				//
				// }
				// // Process the uploaded file items
				// Iterator i = fileItems.iterator();
				for (Entry<String, RequestParameter[]> e : request
						.getRequestParameterMap().entrySet()) {
					for (RequestParameter p : e.getValue()) {
						if (!p.isFormField()) {
							String mimeType = p.getContentType();
							if (mimeType == null) {
								mimeType = "application/octet-stream";
							}
							// String randomNumber = generateRandomNumber();
							// fileNode = albumNode.addNode(randomNumber);
							// fileNode.setProperty("photoDate",
							// dateFormat.format(date));
							// picNode = fileNode.addNode("xOp", "nt:file");
							// jcrNode = picNode.addNode("jcr:content",
							// "nt:resource");
							//
							// jcrNode.setProperty("jcr:data",
							// p-.getInputStream());
							// jcrNode.setProperty("jcr:lastModified",
							// Calendar.getInstance());
							// jcrNode.setProperty("jcr:mimeType", mimeType);
							response.getWriter().println(
									"oooooooooooooooooo---------"
											+ p.getFileName());
						}
					}
				}
				FileItemIterator i = upload.getItemIterator(request);

				while (i.hasNext()) {
					FileItem fi = (FileItem) i.next();
					if (!fi.isFormField()) {
						// Get the uploaded file parameters
						String fieldName = fi.getFieldName();
						String contentType = fi.getContentType();
						String resType[] = contentType.split("/");
						response.getWriter().println(
								"Path----going inside media pass)))-"
										+ contentType);
						if (resType[0].equals("image")) {

							String imgfilenam = fi.getName();

							if (imgfilenam != null && !imgfilenam.equals("")) {
								if (picNode.hasNodes() && imageC == 0) {
									picNode.remove();
									picNode = mediaNode.addNode("images");
								}

								// picNode = mediaNode.addNode("images");
								// picNode = picNode.addNode(imgfilenam);

								imgNode = picNode.addNode(imgfilenam);
								imgNode.setProperty("imgpath",
										"/content/product/products/" + f
												+ "/media/images/" + imgfilenam
												+ "/" + imgfilenam);
								imgNode = imgNode
										.addNode(imgfilenam, "nt:file");
								jcrNode = imgNode.addNode("jcr:content",
										"nt:resource");

								// jcrNode.setProperty("jcr:data",
								// fi.get());

								jcrNode.setProperty("jcr:mimeType",
										"image/jpeg");

							}
							imageC++;

						} else if (resType[0].equals("video")) {
							String vidfilenam = fi.getName();
							if (vidfilenam != null && !vidfilenam.equals("")) {

								if (videoNode.hasNodes() && videoC == 0) {
									videoNode.remove();
									videoNode = mediaNode.addNode("videoes");
								}
								vidNode = videoNode.addNode(vidfilenam);

								vidNode.setProperty("imgpath",
										"/content/product/products/" + f
												+ "/media/videoes/"
												+ vidfilenam + "/" + vidfilenam);
								vidNode = vidNode
										.addNode(vidfilenam, "nt:file");
								jcrNode = vidNode.addNode("jcr:content",
										"nt:resource");

								// jcrNode.setProperty("jcr:data",
								// fi.get());

							}
							videoC++;

						}
					}
				}

			} catch (Exception ex) {
				response.getWriter().println("message----" + ex.getMessage());
			}

			if (node.hasNode("cat")) {
				catNode = node.getNode("cat");
				if (node.getNode("cat").hasNode("eclass")) {

				} else {
					catNode.addNode("eclass");
				}
				if (node.getNode("cat").hasNode("unspsc")) {
					if (request.getParameter("selprdcat1") != null
							&& !request.getParameter("selprdcat1").equals("")) {
						if (node.getNode("cat").getNode("unspsc").hasNodes()) {
							node.getNode("cat").getNode("unspsc").remove();
							catUnspscNode = catNode.addNode("unspsc");
						}
						if (request.getParameter("selprdcat1").indexOf(",") != -1) {
							String selPrdCat[] = request.getParameter(
									"selprdcat1").split(",");
							for (int i = 0; i < selPrdCat.length; i++) {
								catUnspscNode = node.getNode("cat")
										.getNode("unspsc")
										.addNode(selPrdCat[i]);
								catUnspscNode
										.setProperty("catid", selPrdCat[i]);

							}
						} else {
							catUnspscNode = node
									.getNode("cat")
									.getNode("unspsc")
									.addNode(request.getParameter("selprdcat1"));
							catUnspscNode.setProperty("catid",
									request.getParameter("selprdcat1"));
						}

					}

				} else {
					catUnspscNode = catNode.addNode("unspsc");
					if (request.getParameter("selprdcat1") != null
							&& !request.getParameter("selprdcat1").equals("")) {
						if (request.getParameter("selprdcat1").indexOf(",") != -1) {
							String selPrdCat[] = request.getParameter(
									"selprdcat1").split(",");
							for (int i = 0; i < selPrdCat.length; i++) {
								catUnspscNode = node.getNode("cat")
										.getNode("unspsc")
										.addNode(selPrdCat[i]);
								catUnspscNode
										.setProperty("catid", selPrdCat[i]);

							}
						} else {
							catUnspscNode = node
									.getNode("cat")
									.getNode("unspsc")
									.addNode(request.getParameter("selprdcat1"));
							catUnspscNode.setProperty("catid",
									request.getParameter("selprdcat1"));
						}
					}

				}
			} else {
				catNode = node.addNode("cat");
				catNode.addNode("eclass");
				catUnspscNode = catNode.addNode("unspsc");
				if (request.getParameter("selprdcat1") != null
						&& !request.getParameter("selprdcat1").equals("")) {
					if (request.getParameter("selprdcat1").indexOf(",") != -1) {
						String selPrdCat[] = request.getParameter("selprdcat1")
								.split(",");
						for (int i = 0; i < selPrdCat.length; i++) {
							catUnspscNode = node.getNode("cat")
									.getNode("unspsc").addNode(selPrdCat[i]);
							catUnspscNode.setProperty("catid", selPrdCat[i]);

						}
					} else {
						catUnspscNode = node.getNode("cat").getNode("unspsc")
								.addNode(request.getParameter("selprdcat1"));
						catUnspscNode.setProperty("catid",
								request.getParameter("selprdcat1"));
					}
				}
			}

			// industry

			if (node.hasNode("industry")) {
				if (request.getParameter("selIndustryId") != null
						&& !request.getParameter("selIndustryId").equals("")) {
					if (node.getNode("industry").hasNodes()) {
						node.getNode("industry").remove();
						indNode = node.addNode("industry");
					}
					if (request.getParameter("selIndustryId").indexOf(",") != -1) {
						String selPrdIn[] = request.getParameter(
								"selIndustryId").split(",");
						for (int i = 0; i < selPrdIn.length; i++) {
							indNodeP = indNode.addNode(selPrdIn[i]);
							indNodeP.setProperty("industryid", selPrdIn[i]);

						}
					} else {
						indNodeP = indNode.addNode(request
								.getParameter("selIndustryId"));
						indNodeP.setProperty("industryid",
								request.getParameter("selIndustryId"));
					}

				}
			} else {
				indNode = node.addNode("industry");
				if (request.getParameter("selIndustryId") != null
						&& !request.getParameter("selIndustryId").equals("")) {
					if (request.getParameter("selIndustryId").indexOf(",") != -1) {
						String selPrdIn[] = request.getParameter(
								"selIndustryId").split(",");
						for (int i = 0; i < selPrdIn.length; i++) {
							indNodeP = indNode.addNode(selPrdIn[i]);
							indNodeP.setProperty("industryid", selPrdIn[i]);

						}
					} else {
						indNodeP = indNode.addNode(request
								.getParameter("selIndustryId"));
						indNodeP.setProperty("industryid",
								request.getParameter("selIndustryId"));
					}
				}
			}

			// target geography

			if (node.hasNode("targetgeo")) {
				if (request.getParameter("seltgeoId") != null
						&& !request.getParameter("seltgeoId").equals("")) {
					if (node.getNode("targetgeo").hasNodes()) {
						node.getNode("targetgeo").remove();
						tgeoNode = node.addNode("targetgeo");
					}
					if (request.getParameter("seltgeoId").indexOf(",") != -1) {
						String selPrdTG[] = request.getParameter("seltgeoId")
								.split(",");
						for (int i = 0; i < selPrdTG.length; i++) {
							tgeoNodeP = tgeoNode.addNode(selPrdTG[i]);
							tgeoNodeP.setProperty("targetgeoid", selPrdTG[i]);

						}
					} else {
						tgeoNodeP = tgeoNode.addNode(request
								.getParameter("seltgeoId"));
						tgeoNodeP.setProperty("targetgeoid",
								request.getParameter("seltgeoId"));
					}

				}
			} else {
				tgeoNode = node.addNode("targetgeo");
				if (request.getParameter("seltgeoId") != null
						&& !request.getParameter("seltgeoId").equals("")) {
					if (request.getParameter("seltgeoId").indexOf(",") != -1) {
						String selPrdTG[] = request.getParameter("seltgeoId")
								.split(",");
						for (int i = 0; i < selPrdTG.length; i++) {
							tgeoNodeP = tgeoNode.addNode(selPrdTG[i]);
							tgeoNodeP.setProperty("targetgeoid", selPrdTG[i]);

						}
					} else {
						tgeoNodeP = tgeoNode.addNode(request
								.getParameter("seltgeoId"));
						tgeoNodeP.setProperty("targetgeoid",
								request.getParameter("seltgeoId"));
					}
				}
			}

			// response.getWriter().println("Path----cat pass)))-");
			// if (node.hasNode("spec") && node.getNode("spec").hasNode("attr")
			// && node.getNode("spec").hasNode("fattr")) {
			// Node att = node.getNode("spec").getNode("attr");
			// Node fatt = node.getNode("spec").getNode("fattr");
			// String value = "";
			// if(att.hasNodes()){
			// att.remove();
			// att=node.getNode("spec").addNode("attr");
			// }
			// if(fatt.hasNodes()){
			// fatt.remove();
			// fatt=node.getNode("spec").addNode("fattr");
			// }
			//
			// if (request.getParameterValues("label") != null
			// && !request.getParameterValues("label").equals("")) {
			// String[] attrLabel = request.getParameterValues("label");
			// String[] attrType = request.getParameterValues("type");
			// String[] attrMin = request.getParameterValues("min");
			// String[] attrMax = request.getParameterValues("max");
			// String[] attrUom = request.getParameterValues("uom");
			// for (int i = 0; i < attrLabel.length; i++) {
			// Node subatt = att.addNode(String.valueOf(i));
			// subatt.setProperty("attrname", attrLabel[i]);
			// subatt.setProperty("value", attrType[i]);
			// subatt.setProperty("min", attrMin[i]);
			// subatt.setProperty("max", attrMax[i]);
			// subatt.setProperty("uom", attrUom[i]);
			// }
			// }
			// if (request.getParameterValues("txtheading") != null
			// && !request.getParameterValues("txtheading").equals("")) {
			// String[] freeattrHeading = request
			// .getParameterValues("txtheading");
			// String[] freeattrValue = request
			// .getParameterValues("txtvalue");
			// for (int i = 0; i < freeattrHeading.length; i++) {
			// Node subatt = fatt.addNode(String.valueOf(i));
			// subatt.setProperty("attrname", freeattrHeading[i]);
			// subatt.setProperty("value", freeattrValue[i]);
			// }
			// }
			//
			// } else {
			// specNode = node.addNode("spec");
			// Node att = specNode.addNode("attr");
			// Node fatt = specNode.addNode("fattr");
			// if (request.getParameterValues("label") != null
			// && !request.getParameterValues("label").equals("")) {
			// String[] attrLabel = request.getParameterValues("label");
			// String[] attrType = request.getParameterValues("type");
			// String[] attrMin = request.getParameterValues("min");
			// String[] attrMax = request.getParameterValues("max");
			// String[] attrUom = request.getParameterValues("uom");
			// for (int i = 0; i < attrLabel.length; i++) {
			// Node subatt = att.addNode(String.valueOf(i));
			// subatt.setProperty("attrname", attrLabel[i]);
			// subatt.setProperty("value", attrType[i]);
			// subatt.setProperty("min", attrMin[i]);
			// subatt.setProperty("max", attrMax[i]);
			// subatt.setProperty("uom", attrUom[i]);
			// }
			// }
			// if (request.getParameterValues("txtheading") != null
			// && !request.getParameterValues("txtheading").equals("")) {
			// String[] freeattrHeading = request
			// .getParameterValues("txtheading");
			// String[] freeattrValue = request
			// .getParameterValues("txtvalue");
			// for (int i = 0; i < freeattrHeading.length; i++) {
			// Node subatt = fatt.addNode(String.valueOf(i));
			// subatt.setProperty("attrname", freeattrHeading[i]);
			// subatt.setProperty("value", freeattrValue[i]);
			// }
			// }
			//
			// }
			response.getWriter().println("Path----free att  pass)))-");
			if (node.hasNode("sup")) {
			} else {
				supNode = node.addNode("sup");
				chsupNode = supNode.addNode(request.getParameter("companyId"));
				chsupNode.setProperty("supid",
						request.getParameter("companyId"));
			}
			if (prod != null && !prod.equals("new") && prod1.equals("edit")) {
				compNode = session.getRootNode().getNode("content")
						.getNode("company")
						.getNode(request.getParameter("companyId"));
				if (compNode.hasNode("product")) {
					compProNode = compNode.getNode("product");
					if (compProNode.hasNode(Long.toString(a))) {

					} else {
						compProNode.addNode(Long.toString(a));
					}

				} else {
					response.getWriter().print("----))))-start");
					compProNode = compNode.addNode("product");
					compProNode.addNode(Long.toString(a));
					response.getWriter().print("----))))-end");

				}
			} else if (prod != null && prod.equals("new")) {
				compNode = session.getRootNode().getNode("content")
						.getNode("company")
						.getNode(request.getParameter("companyId"));
				if (compNode.hasNode("product")) {
					compProNode = compNode.getNode("product");
					if (compProNode.hasNode(Long.toString(a))) {

					} else {
						compProNode.addNode(Long.toString(a));
					}

				} else {
					// response.getWriter().print("----))))-start");
					compProNode = compNode.addNode("product");
					compProNode.addNode(Long.toString(a));
					// response.getWriter().print("----))))-end");

				}
			}
			// response.getWriter().print("----))))-"+prod);
			response.getWriter().println("Path----allla pass)))-");
			session.save();

		} catch (PathNotFoundException e) {
			response.getWriter().print("Path----)))-" + e.getMessage());
			e.printStackTrace();
		} catch (RepositoryException e) {
			response.getWriter().print("Rrespo----)))-" + e.getMessage());
			e.printStackTrace();
		} catch (Exception e) {
			response.getWriter().print("Rrespo1----)))-" + e.getMessage());
			e.printStackTrace();
		}
		return a;
	}

	public Long saveProductCatalogInfo(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws ServletException,
			IOException {
		Session session = null;
		String prod = request.getParameter("id");
		String prod1 = request.getParameter("param");
		String id = "";
		Node node = null, compNode = null, compProNode = null, supNode = null, chsupNode = null, catUnspscNode = null, catNode = null, specNode = null, prodNode = null, mediaNode = null, docNode = null, dcNode = null, videoNode = null, vidNode = null, imgNode = null, picNode = null, jcrNode = null;
		// Session session;
		long a = 0;
		DateFormat dateFormat = new SimpleDateFormat("MMM d,yyyy");
		Date date = new Date();
		String f = "";
		try {

			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			if (session.getRootNode().getNode("content").getNode("product")
					.hasNode("products")) {
				prodNode = session.getRootNode().getNode("content")
						.getNode("product").getNode("products");
			} else {
				prodNode = session.getRootNode().getNode("content")
						.getNode("product").addNode("products");
				prodNode.setProperty("prodCount", 0);
			}

			String path = request.getParameter("catalogpath");
			String flowPath[] = path.split("/");
			for (int i = 0; i < flowPath.length; i++) {
				prodNode = prodNode.getNode(flowPath[i]);

			}
			response.getWriter().println("setp 1---------"+prodNode);
			node=prodNode;
			if (node.hasNode("template")) {
				 node.getNode("template").remove();
				 node = node.addNode("template");
				
				 
				
				 Node att = node.getNode("template").addNode("attr");
				if (request.getParameterValues("labelId") != null
						&& !request.getParameterValues("labelId").equals("")) {
					String[] attrLabel = request.getParameterValues("labelId");
					String[] attrType = request.getParameterValues("type");

					String[] attrUom = request.getParameterValues("uomId");
					for (int i = 0; i < attrLabel.length; i++) {
						Node subatt = att.addNode(String.valueOf(i));
						subatt.setProperty("label", attrLabel[i]);
						subatt.setProperty("type", attrType[i]);
						subatt.setProperty("uom", attrUom[i]);
					}
				}
				Node att1  = node.getNode("template").addNode("comm");
				if (request.getParameterValues("uomIdCom") != null
						&& !request.getParameterValues("uomIdCom").equals("")) {
					String[] attrLabel = request.getParameterValues("uomIdCom");
					String[] attrType = request
							.getParameterValues("commercial");
					String[] attrTypeCom = request
							.getParameterValues("typeCom");

					for (int i = 0; i < attrLabel.length; i++) {
						Node subatt = att1.addNode(String.valueOf(i));
						subatt.setProperty("uomCom", attrLabel[i]);
						subatt.setProperty("id", attrType[i]);
						subatt.setProperty("typeCom", attrTypeCom[i]);

						for (int i1 = 0; i1 < attrLabel.length; i1++) {
							Node subat = att1.addNode(String.valueOf(i1));
							subat.setProperty("uomCom", attrLabel[i1]);
							subat.setProperty("id", attrType[i1]);
							subat.setProperty("typeCom", attrTypeCom[i1]);

						}
					}
				}

			} else {
				Node attr = node.addNode("template");
				attr = attr.addNode("attr");
				// Node fatt = specNode.addNode("fattr");
				response.getWriter().println("setp2--------"+attr);
				if (request.getParameterValues("labelId") != null
						&& !request.getParameterValues("labelId").equals("")) {
					String[] attrLabel = request.getParameterValues("labelId");
					String[] attrType = request.getParameterValues("type");

					String[] attrUom = request.getParameterValues("uomId");
					for (int i = 0; i < attrLabel.length; i++) {
						Node subatt = attr.addNode(String.valueOf(i));
						subatt.setProperty("label", attrLabel[i]);
						subatt.setProperty("type", attrType[i]);
						subatt.setProperty("uom", attrUom[i]);
					}
				}
				Node attr1 = node.getNode("template").addNode("comm");
				if (request.getParameterValues("uomIdCom") != null
						&& !request.getParameterValues("uomIdCom").equals("")) {
					String[] attrLabel = request.getParameterValues("uomIdCom");
					String[] attrType = request
							.getParameterValues("commercial");
					String[] attrTypeCom = request
							.getParameterValues("typeCom");

					for (int i = 0; i < attrLabel.length; i++) {
						Node subatt = attr1.addNode(String.valueOf(i));
						subatt.setProperty("uomCom", attrLabel[i]);
						subatt.setProperty("id", attrType[i]);
						subatt.setProperty("typeCom", attrTypeCom[i]);

					}

				}
			}
			// response.getWriter().print("----))))-"+prod);
			response.getWriter().println("Path----allla pass)))-");
			session.save();

		} catch (PathNotFoundException e) {
			response.getWriter().print("Path----)))-" + e.getMessage());
			e.printStackTrace();
		} catch (RepositoryException e) {
			response.getWriter().print("Rrespo----)))-" + e.getMessage());
			e.printStackTrace();
		} catch (Exception e) {
			response.getWriter().print("Rrespo1----)))-" + e.getMessage());
			e.printStackTrace();
		}
		return a;
	}

	public String saveChildProduct(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws IOException {
		try {
			Session session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));
			Node rootNode = session.getRootNode().getNode("content")
					.getNode("product");
			if (rootNode.hasNode("products")) {
				rootNode = rootNode.getNode("products");
			} else {
				rootNode = rootNode.addNode("products");
			}
			String id = request.getParameter("id");
			if (id != "new") {
				String path = request.getParameter("pathToAdd");
				String flowPath[] = path.split("/");
				for (int i = 0; i < flowPath.length; i++) {
					rootNode = rootNode.getNode(flowPath[i]);

				}

				Node templateNode = rootNode.getNode("template");
				NodeIterator attr = null, comm = null;

				if (templateNode.hasNode("attr")) {
					attr = templateNode.getNode("attr").getNodes();
				}

				if (templateNode.hasNode("comm")) {
					comm = templateNode.getNode("comm").getNodes();
				}
				ArrayList<String> propList = new ArrayList<String>();
				ArrayList<String> propListcomm = new ArrayList<String>();
				ArrayList<String> childNodename = new ArrayList<String>();

				if (attr != null) {
					while (attr.hasNext()) {
						Node a = attr.nextNode();
						response.getWriter().print(
								"----I an in 1--------" + a.getPath());
						String type = a.getProperty("type").getString();
						String label = a.getProperty("label").getString();

						response.getWriter().print("----I an in 2--------");
						NodeIterator typelist = session.getRootNode()
								.getNode("content").getNode("attribute")
								.getNode("type").getNode(type).getNodes();
						Node list1 = session.getRootNode().getNode("content")
								.getNode("attribute").getNode("label")
								.getNode(label);
						response.getWriter().print("----I an in3--------");

						while (typelist.hasNext()) {
							response.getWriter().print(
									"----I an in3 -whle llo[ --------");
							Node list = typelist.nextNode();

							propList.add(list1.getProperty("name").getString()
									+ "_"
									+ list.getProperty("placeholder")
											.getString());
							childNodename.add(list1.getProperty("id")
									.getString());
						}
					}
				}
				propList.add("catalog");
//				propList.add("image");
//				propList.add("video");
//				propList.add("image");
				if (comm != null) {
					while (comm.hasNext()) {
						Node a = comm.nextNode();
						response.getWriter().print(
								"----I an in 1--------" + a.getPath());
						String type = a.getProperty("typeCom").getString();
						String label = a.getProperty("id").getString();

						response.getWriter().print("----I an in 2--------");
						NodeIterator typelist = session.getRootNode()
								.getNode("content").getNode("attribute")
								.getNode("type").getNode(type).getNodes();
						Node list1 = session.getRootNode().getNode("content")
								.getNode("attribute").getNode("commercial")
								.getNode(label);
						response.getWriter().print("----I an in3--------");

						while (typelist.hasNext()) {
							response.getWriter().print(
									"----I an in3 -whle llo[ --------");
							Node list = typelist.nextNode();

							propListcomm.add(list1.getProperty("name")
									.getString()
									+ "_"
									+ list.getProperty("placeholder")
											.getString());
							childNodename.add(list1.getProperty("id")
									.getString());
						}
					}
				}

				long prodcount = 0;
				HashMap<String, String[]> hm = new HashMap<String, String[]>();

				for (int p = 0; p < propList.size(); p++) {

					hm.put(propList.get(p),
							request.getParameterValues(propList.get(p)));
					prodcount = request.getParameterValues(propList.get(p)).length;
				}

				for (int p = 0; p < propList.size(); p++) {

					hm.put(propListcomm.get(p),
							request.getParameterValues(propListcomm.get(p)));

				}
				
				Node parentNode = rootNode;
				if (rootNode.hasNode("child")) {
					rootNode = rootNode.getNode("child");

				} else {
					rootNode = rootNode.addNode("child");
					rootNode.setProperty("ccount", Long.valueOf(prodcount));
				}

				// if(rootNode.getNodes().getSize()!=prodcount){
				for (long o = 0; o < prodcount; o++) {
					Node chi = rootNode.addNode(String.valueOf(o));
					Node childatt = chi.addNode("attr");
					Node childcomm = chi.addNode("comm");
				}
				// }
				for (int y = 0; y < propList.size(); y++) {
					NodeIterator itr = rootNode.getNodes();
					String value[] = hm.get(propList.get(y));
					int h = 0;
					while (itr.hasNext()) {
						Node a = itr.nextNode().getNode("attr");
						// a=a.addNode(propList.get(y).split("_")[0]);
						a.setProperty(propList.get(y), value[h]);
						h++;
					}
				}

				for (int y = 0; y < propListcomm.size(); y++) {
					NodeIterator itr = rootNode.getNodes();
					String value[] = hm.get(propListcomm.get(y));
					int h = 0;
					while (itr.hasNext()) {
						Node a = itr.nextNode().getNode("comm");
						// a=a.addNode(propList.get(y).split("_")[0]);
						a.setProperty(propListcomm.get(y), value[h]);
						h++;
					}
				}

			}
			
			response.getWriter().print("----ggggg--------");
			session.save();
		} catch (Exception e) {
			response.getWriter().print("------------" + e.getMessage());

		}
		return null;
	}

	public HashMap getCategoryByNode(String dNodeStr, String qsrchparam,
			SlingHttpServletRequest request, SlingHttpServletResponse response) {

		HashMap resultList = new HashMap();
		String querryStr = "";
		Session session = null;
		Node tempPrdNode, childNode;

		qsrchparam = qsrchparam.toLowerCase();

		// querryStr =
		// "select * from [nt:unstructured] where (contains('name','*"+qsrchparam+"*'))  and ISDESCENDANTNODE('"+dNodeStr+"')";
		querryStr = "select * from [nt:unstructured] where  ISDESCENDANTNODE('"
				+ dNodeStr + "') and lower(name)  like '" + qsrchparam + "%'";
		try {
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));
			Workspace workspace = session.getWorkspace();
			Query query = workspace.getQueryManager().createQuery(querryStr,
					Query.JCR_SQL2);
			QueryResult result = query.execute();
			NodeIterator iterator = result.getNodes();
			while (iterator.hasNext()) {
				tempPrdNode = iterator.nextNode();
				resultList.put(tempPrdNode.getProperty("unspsc").getString(),
						tempPrdNode.getProperty("name").getString());

			}

		}

		catch (PathNotFoundException e) {
			e.printStackTrace();
		} catch (RepositoryException e) {
			e.printStackTrace();
		} finally {

		}
		return resultList;
	}

	public HashMap getCompanyByNode(String dNodeStr, String qsrchparam,
			SlingHttpServletRequest request, SlingHttpServletResponse response) {

		HashMap resultList = new HashMap();
		String querryStr = "";
		Session session = null;
		Node tempPrdNode, childNode;

		qsrchparam = qsrchparam.toLowerCase();
		// querryStr="select * from [nt:unstructured] where  ISDESCENDANTNODE('"+dNodeStr+"') and lower(name)  like '"+qsrchparam+"%'";
		querryStr = "select * from [nt:unstructured] where  (contains('creatorEmailId', '*"
				+ qsrchparam
				+ "*')) "
				+ "and ISDESCENDANTNODE('"
				+ dNodeStr
				+ "')";
		try {
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));
			Workspace workspace = session.getWorkspace();
			Query query = workspace.getQueryManager().createQuery(querryStr,
					Query.JCR_SQL2);
			QueryResult result = query.execute();
			NodeIterator iterator = result.getNodes();
			while (iterator.hasNext()) {
				tempPrdNode = iterator.nextNode();
				tempPrdNode = tempPrdNode.getParent();
				resultList.put(tempPrdNode.getProperty("companyNumber")
						.getString(), tempPrdNode.getProperty("title")
						.getString());

			}

		}

		catch (PathNotFoundException e) {
			e.printStackTrace();
		} catch (RepositoryException e) {
			e.printStackTrace();
		} finally {

		}
		return resultList;
	}

	public String uploadTemplateProducts(TemplateDataBean t,
			SlingHttpServletResponse response, Node prodNodes, String pid)
			throws IOException {

		Node node = null, compNode = null, compProNode = null, supNode = null, chsupNode = null, catUnspscNode = null, catNode = null, specNode = null, mediaNode = null, docNode = null, dcNode = null, videoNode = null, vidNode = null, imgNode = null, picNode = null, jcrNode = null;
		// Session session;
		String status = "";
		long a = 0;

		String f = "";
		try {
			NodeIterator comItr = prodNodes.getNode(pid).getNode("sup")
					.getNodes();
			String company = "";
			while (comItr.hasNext()) {
				javax.jcr.Property p = comItr.nextNode().getProperty("supid");
				company = p.getString();
			}
			String check = "";
			check = this.checkModelExistence(company, t.getModelNu());
			if (check != "" && check.trim().equals("true")) {
				return "000@,fail";
			}

			try {
				Long s = prodNodes.getProperty("prodCount").getLong();
				f = Long.toString(s + 1);
				node = prodNodes.addNode(f);
				a = s + 1;
				node.setProperty("prodid", s + 1);
				node.setProperty("prd_code", s + 1);
				prodNodes.setProperty("prodCount", s + 1);
				node.setProperty("modelno", t.getModelNu());
				node.setProperty("name", t.getProductName());
				node.setProperty("shortdescription", t.getShortDescription());
				node.setProperty("description", t.getLongDescription());
				node.setProperty("keyword", t.getKeyword());
				node.setProperty("price", t.getPrice());
				node.setProperty("moq", t.getMoq());
				node.setProperty("sbl", t.getSbl());
				mediaNode = node.addNode("media");

				NodeIterator prod = prodNodes.getNode(pid).getNode("cat")
						.getNode("unspsc").getNodes();
				String cat = "";
				while (prod.hasNext()) {
					Node as = prod.nextNode();
					cat = as.getProperty("catid").getString();
				}

				catNode = node.addNode("cat");
				catNode.addNode("eclass");
				Node unsp = catNode.addNode("unspsc");
				Node exunsp = unsp.addNode(cat);
				exunsp.setProperty("catid", cat);
				// prodNodes.getNode("spec").getNode("attr").getNode
				specNode = node.addNode("spec");
				Node att = specNode.addNode("attr");
				Node fatt = specNode.addNode("fattr");
				int v = 0;

				NodeIterator nitr = prodNodes.getNode(pid).getNode("spec")
						.getNode("attr").getNodes();
				int o = 0, m = 0;

				while (nitr.hasNext()) {
					Node n = nitr.nextNode();
					Node subatt = att.addNode(String.valueOf(o));
					subatt.setProperty("attrname", n.getProperty("attrname")
							.getString());
					if (t.getAl().size() == (nitr.getSize() * 3)) {
						subatt.setProperty("value", t.getAl().get(m++));
						subatt.setProperty("min", t.getAl().get(m++));
						subatt.setProperty("max", t.getAl().get(m++));
					} else {
						subatt.setProperty("value", "");
						subatt.setProperty("min", "");
						subatt.setProperty("max", "");
					}
					subatt.setProperty("uom", n.getProperty("uom").getString());
					o++;

				}

				NodeIterator nitr1 = prodNodes.getNode(pid).getNode("spec")
						.getNode("fattr").getNodes();
				int o1 = 0, m1 = 0;

				while (nitr1.hasNext()) {
					Node n = nitr1.nextNode();
					Node subatt = fatt.addNode(String.valueOf(o1));
					subatt.setProperty("attrname", n.getProperty("attrname")
							.getString());

					if (t.getFal().size() == nitr1.getSize()) {
						subatt.setProperty("value", t.getFal().get(m1));
					} else {
						subatt.setProperty("value", "");
					}
					o1++;
					m1++;

				}

				supNode = node.addNode("sup");
				NodeIterator supI = prodNodes.getNode(pid).getNode("sup")
						.getNodes();
				int sups = 0;
				String supId = "";
				while (supI.hasNext()) {
					Node subs = supI.nextNode();
					Node r = supNode.addNode(subs.getProperty("supid")
							.getString());
					r.setProperty("supid", subs.getProperty("supid")
							.getString());
					supId = subs.getProperty("supid").getString();
					sups++;
				}

				compNode = prodNodes.getParent().getParent().getNode("company")
						.getNode(supId);
				if (compNode.hasNode("product")) {
					compProNode = compNode.getNode("product");
					compProNode.addNode(f);

				} else {
					compProNode = compNode.addNode("product");
					compProNode.addNode(f);

				}
				// response.getWriter().print("----))))-"+prod);
				// session.save();
				status = "success";

			} catch (PathNotFoundException e) {
				status = e.getMessage();
				// response.getWriter().print("Path----)))-" + e.getMessage());
				// e.printStackTrace();
			} catch (RepositoryException e) {
				status = e.getMessage();
				// response.getWriter().print("Rrespo----)))-" +
				// e.getMessage());
				// e.printStackTrace();
			} catch (Exception e) {
				status = e.getMessage();
				// response.getWriter().print("Rrespo----)))-" +
				// e.getMessage());
				// e.printStackTrace();
			}
		} catch (Exception e) {

		}
		return f + "@," + status;
	}

	public ArrayList<String> readXLSTemplateFile(
			SlingHttpServletRequest request, SlingHttpServletResponse response,
			String pid) throws IOException {
		Session session = null;
		Node dcNode, jcrNode, docNode = null;
		ArrayList<String> productCodes = new ArrayList<String>();
		String status = "";
		try {

			if (request.getParameter("uploadtemplate") != null
					&& !request.getParameter("uploadtemplate").equals("")) {
				RequestParameter[] apDoc = request.getRequestParameterMap()
						.get("uploadtemplate");
				session = repo.login(new SimpleCredentials("admin", "admin"
						.toCharArray()));

				Node pr = session.getRootNode().getNode("content")
						.getNode("product").getNode("products").getNode(pid)
						.getNode("spec");
				Long att = pr.getNode("attr").getNodes().getSize();
				att = att * 3;
				Long fatt = pr.getNode("fattr").getNodes().getSize();
				fatt = fatt * 3;
				NodeIterator comItr = session.getRootNode().getNode("content")
						.getNode("product").getNode("products").getNode(pid)
						.getNode("sup").getNodes();
				String company = "";
				while (comItr.hasNext()) {
					javax.jcr.Property p = comItr.nextNode().getProperty(
							"supid");
					company = p.getString();
				}

				for (int i = 0; i < 1; i++) {
					int a = 0;

					String docfilenam = apDoc[i].getFileName();
					if (docfilenam != null && !docfilenam.equals("")) {
						InputStream isp = apDoc[i].getInputStream();
						HSSFWorkbook workbook = new HSSFWorkbook(isp);
						HSSFSheet sheet = workbook.getSheetAt(0);
						Iterator rows = sheet.rowIterator();
						int x = 0;
						boolean firstRowIgnore = false;
						while (rows.hasNext()) {
							HSSFRow row = (HSSFRow) rows.next();
							if (firstRowIgnore) {
								x = 0;
								a = 0;
								firstRowIgnore = true;
								TemplateDataBean t = new TemplateDataBean();
								ArrayList<String> at = new ArrayList<String>();
								ArrayList<String> fat = new ArrayList<String>();
								DataFormatter formatter = new DataFormatter();
								Iterator cells = row.cellIterator();
								ArrayList<String> data = new ArrayList<String>();
								while (cells.hasNext()) {
									// creating formatter using the default
									// locale
									HSSFCell cell = (HSSFCell) cells.next();

									if (x < 8) {

										switch (x) {
										case 0:
											t.setModelNu(formatter
													.formatCellValue(cell));
											break;
										case 1:
											t.setProductName(formatter
													.formatCellValue(cell));
											break;
										case 2:
											t.setShortDescription(formatter
													.formatCellValue(cell));
											break;
										case 3:
											t.setLongDescription(formatter
													.formatCellValue(cell));
											break;
										case 4:
											t.setKeyword(formatter
													.formatCellValue(cell));
											break;
										case 5:
											t.setPrice(formatter
													.formatCellValue(cell));
											break;
										case 6:
											t.setMoq(formatter
													.formatCellValue(cell));
											break;
										case 7:
											t.setSbl(formatter
													.formatCellValue(cell));
											break;

										}
										x++;
									} else if (att > a) {
										at.add(formatter.formatCellValue(cell));
										a++;
									} else {
										fat.add(formatter.formatCellValue(cell));

									}

								}
								t.setAl(at);
								t.setFal(fat);
								// String check=this.checkModelExistence("14",
								// "11000");
								// if(check!=null && check.equals("false")){
								status = this.uploadTemplateProducts(
										t,
										response,
										session.getRootNode()
												.getNode("content")
												.getNode("product")
												.getNode("products"), pid);
								// t=null;
								String h[] = status.split("@,");
								if (h != null && h[1].equals("success")) {
									productCodes.add(h[0]);
								}
								// }
							} else {
								firstRowIgnore = true;
							}
						}
					}

				}

				session.save();
				status = "success";

			}
		} catch (Exception e) {
			// response.getWriter().print(e.getMessage()+"geet");
			status = e.getMessage() + "sssssssssssss";
			response.getWriter().print(e.getMessage());
		}
		return productCodes;
	}

	@SuppressWarnings("deprecation")
	public String uploadAttachements(SlingHttpServletRequest request,
			SlingHttpServletResponse response, String pid) {
		String status = "";
		Session session = null;
		try {
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));
			Node mediaNode = null;

			Node productNode = session.getRootNode().getNode("content")
					.getNode("product").getNode("products").getNode(pid);
			mediaNode = productNode.getNode("media");
			if (request.getParameter("img" + pid) != null
					&& !request.getParameter("img" + pid).equals("")) {
				Node imgNode, picNode, jcrNode = null;
				RequestParameter[] ap = request.getRequestParameterMap().get(
						"img" + pid);
				for (int i = 0; i < ap.length; i++) {

					String imgfilenam = ap[i].getFileName();
					// response.getWriter().print("inside file----)))-"+group);
					if (imgfilenam != null && !imgfilenam.equals("")) {
						picNode = mediaNode.addNode("images");
						// picNode = picNode.addNode(imgfilenam);

						imgNode = picNode.addNode(imgfilenam);
						imgNode.setProperty("imgpath",
								"/content/product/products/" + pid
										+ "/media/images/" + imgfilenam + "/"
										+ imgfilenam);
						imgNode = imgNode.addNode(imgfilenam, "nt:file");
						jcrNode = imgNode.addNode("jcr:content", "nt:resource");

						jcrNode.setProperty("jcr:data", ap[i].getInputStream());

						jcrNode.setProperty("jcr:mimeType", "image/jpeg");

					}
				}
			}

			if (request.getParameter("vid" + pid) != null
					&& !request.getParameter("vid" + pid).equals("")) {
				Node videoNode, vidNode, jcrNode = null;

				RequestParameter[] apVid = request.getRequestParameterMap()
						.get("vid" + pid);
				for (int i = 0; i < apVid.length; i++) {
					String vidfilenam = apVid[i].getFileName();
					// response.getWriter().print("inside file----)))-"+group);
					if (vidfilenam != null && !vidfilenam.equals("")) {
						videoNode = mediaNode.addNode("videoes");
						vidNode = videoNode.addNode(vidfilenam);
						vidNode.setProperty("imgpath",
								"/content/product/products/" + pid
										+ "/media/videoes/" + vidfilenam + "/"
										+ vidfilenam);
						vidNode = vidNode.addNode(vidfilenam, "nt:file");
						jcrNode = vidNode.addNode("jcr:content", "nt:resource");

						jcrNode.setProperty("jcr:data",
								apVid[i].getInputStream());
					}
				}
			}
			if (request.getParameter("att" + pid) != null
					&& !request.getParameter("att" + pid).equals("")) {
				Node videoNode, vidNode, jcrNode = null;
				Node docNode, dcNode = null;

				RequestParameter[] apDoc = request.getRequestParameterMap()
						.get("att" + pid);
				for (int i = 0; i < apDoc.length; i++) {

					String docfilenam = apDoc[i].getFileName();

					if (docfilenam != null && !docfilenam.equals("")) {
						docNode = mediaNode.addNode("attachments");

						dcNode = docNode.addNode(docfilenam);
						dcNode.setProperty("imgpath",
								"/content/product/products/" + pid
										+ "/media/attachments/" + docfilenam
										+ "/" + docfilenam);
						dcNode = dcNode.addNode(docfilenam, "nt:file");
						jcrNode = dcNode.addNode("jcr:content", "nt:resource");

						jcrNode.setProperty("jcr:data",
								apDoc[i].getInputStream());

					}
				}
			}
			session.save();
			status = "success";
		} catch (Exception e) {
			status = e.getMessage();

		}
		return status;
	}

	// /////////////

	public String readCountryMaster(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws IOException {
		Session session = null;
		Node dcNode, jcrNode, docNode, node = null;
		ArrayList<String> productCodes = new ArrayList<String>();
		String status = "failure";
		try {

			RequestParameter[] apDoc = request.getRequestParameterMap().get(
					"uploadtemplate");
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			Node pr = session.getRootNode().getNode("content")
					.getNode("countrymaster");

			for (int i = 0; i < 1; i++) {
				int a = 0;

				String docfilenam = apDoc[i].getFileName();
				if (docfilenam != null && !docfilenam.equals("")) {
					InputStream isp = apDoc[i].getInputStream();
					HSSFWorkbook workbook = new HSSFWorkbook(isp);
					HSSFSheet sheet = workbook.getSheetAt(0);
					Iterator rows = sheet.rowIterator();
					int x = 0;
					boolean firstRowIgnore = false;
					while (rows.hasNext()) {
						HSSFRow row = (HSSFRow) rows.next();
						if (firstRowIgnore) {
							x = 0;
							a = 0;
							firstRowIgnore = true;
							TemplateDataBean t = new TemplateDataBean();
							ArrayList<String> at = new ArrayList<String>();
							ArrayList<String> fat = new ArrayList<String>();
							DataFormatter formatter = new DataFormatter();
							Iterator cells = row.cellIterator();
							ArrayList<String> data = new ArrayList<String>();
							String nodeName = "";
							while (cells.hasNext()) {
								// creating formatter using the default
								// locale
								HSSFCell cell = (HSSFCell) cells.next();

								String countryCode = formatter
										.formatCellValue(cell);
								response.getWriter().println(
										"Value" + countryCode);

								String no = countryCode.trim().split("/")[0];
								response.getWriter().println(
										"Value after splir " + no);
								if (nodeName == "" && !pr.hasNode(no.trim())) {
									response.getWriter().println(
											" goingt to Add" + no
													+ "------------"
													+ countryCode);
									node = pr.addNode(no.trim());
									response.getWriter().println(
											" Added" + countryCode);
								} else {
									response.getWriter().println(
											"Not Added" + countryCode);
								}

								if (x < 3) {

									switch (x) {
									case 0:
										node.setProperty("countrycode",
												countryCode.split("/")[0]);
										nodeName = countryCode;
										// node.setProperty("prd_code", s + 1);

										break;
									case 1:
										node.setProperty("dialingcode",
												formatter.formatCellValue(cell));
										break;
									case 2:
										node.setProperty("country",
												formatter.formatCellValue(cell));
										nodeName = "";
										break;
									}
									x++;
								}
							}

						} else {
							firstRowIgnore = true;
						}
					}
				}

			}

			session.save();
			status = "success";

		} catch (Exception e) {
			// response.getWriter().print(e.getMessage()+"geet");
			status = e.getMessage() + "sssssssssssss";
			response.getWriter().print(e.getMessage());
		}
		return status;
	}

	// /////////////

	public String readStateView(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws IOException {
		Session session = null;
		Node dcNode, jcrNode, docNode, node = null;
		ArrayList<String> productCodes = new ArrayList<String>();
		String status = "failure";
		try {

			RequestParameter[] apDoc = request.getRequestParameterMap().get(
					"uploadtemplate");
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			Node pr1 = session.getRootNode().getNode("content")
					.getNode("address");
			Node pr = pr1.addNode("IN");
			for (int i = 0; i < 1; i++) {
				int a = 0;

				String docfilenam = apDoc[i].getFileName();
				if (docfilenam != null && !docfilenam.equals("")) {
					InputStream isp = apDoc[i].getInputStream();
					HSSFWorkbook workbook = new HSSFWorkbook(isp);
					HSSFSheet sheet = workbook.getSheetAt(0);
					Iterator rows = sheet.rowIterator();
					int x = 0;
					boolean firstRowIgnore = false;
					String nodeName = "";
					while (rows.hasNext()) {
						HSSFRow row = (HSSFRow) rows.next();
						if (firstRowIgnore) {
							x = 0;
							a = 0;
							firstRowIgnore = true;
							TemplateDataBean t = new TemplateDataBean();
							ArrayList<String> at = new ArrayList<String>();
							ArrayList<String> fat = new ArrayList<String>();
							DataFormatter formatter = new DataFormatter();
							Iterator cells = row.cellIterator();
							ArrayList<String> data = new ArrayList<String>();

							while (cells.hasNext()) {
								// creating formatter using the default
								// locale
								HSSFCell cell = (HSSFCell) cells.next();
								response.getWriter().println(
										"start------------"
												+ formatter
														.formatCellValue(cell));

								// String no=countryCode.trim().split("/")[0];
								// response.getWriter().println("Value after splir "+no);
								if (nodeName == ""
										&& !pr.hasNode(formatter
												.formatCellValue(cell))) {
									response.getWriter()
											.println(
													" goingt to Add------------"
															+ formatter
																	.formatCellValue(cell));
									node = pr.addNode(formatter
											.formatCellValue(cell));
									// response.getWriter().println(" Added"+countryCode);
								} else {
									response.getWriter()
											.println(
													"Not Added"
															+ formatter
																	.formatCellValue(cell));
								}

								response.getWriter().println(
										"end------------"
												+ formatter
														.formatCellValue(cell));

								if (x < 7) {

									switch (x) {
									case 0:
										response.getWriter()
												.println(
														"statecode"
																+ formatter
																		.formatCellValue(cell));
										node.setProperty("statecode",
												formatter.formatCellValue(cell));
										nodeName = formatter
												.formatCellValue(cell);
										// node.setProperty("prd_code", s + 1);

										break;
									case 1:
										response.getWriter()
												.println(
														"statename"
																+ formatter
																		.formatCellValue(cell));
										node.setProperty("statename",
												formatter.formatCellValue(cell));
										break;
									case 2:
										node.setProperty("stpopulation",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 3:
										node.setProperty("stareakm",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 4:
										node.setProperty("stcapital",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 5:
										node.setProperty("stlatitude",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 6:
										response.getWriter()
												.println(
														"stlongitude"
																+ formatter
																		.formatCellValue(cell));
										node.setProperty("stlongitude",
												formatter.formatCellValue(cell));
										nodeName = "";
										break;
									}
									x++;
								}
							}

						} else {
							firstRowIgnore = true;
						}
					}
				}

			}

			session.save();
			status = "success";

		} catch (Exception e) {
			// response.getWriter().print(e.getMessage()+"geet");
			status = e.getMessage() + "sssssssssssss";
			response.getWriter().print(e.getMessage());
		}
		return status;
	}

	// /////////////

	public String readDistrictView(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws IOException {
		Session session = null;
		Node dcNode, jcrNode, docNode, node = null;
		ArrayList<String> productCodes = new ArrayList<String>();
		String status = "failure";
		try {

			RequestParameter[] apDoc = request.getRequestParameterMap().get(
					"uploadtemplate");
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			Node pr = session.getRootNode().getNode("content")
					.getNode("address").getNode("IN").getNode("MH");
			// Node pr = pr1.addNode("IN");
			for (int i = 0; i < 1; i++) {
				int a = 0;

				String docfilenam = apDoc[i].getFileName();
				if (docfilenam != null && !docfilenam.equals("")) {
					InputStream isp = apDoc[i].getInputStream();
					HSSFWorkbook workbook = new HSSFWorkbook(isp);
					HSSFSheet sheet = workbook.getSheetAt(0);
					Iterator rows = sheet.rowIterator();
					int x = 0;
					boolean firstRowIgnore = false;
					String nodeName = "";
					while (rows.hasNext()) {
						HSSFRow row = (HSSFRow) rows.next();
						if (firstRowIgnore) {
							x = 0;
							a = 0;
							firstRowIgnore = true;
							TemplateDataBean t = new TemplateDataBean();
							ArrayList<String> at = new ArrayList<String>();
							ArrayList<String> fat = new ArrayList<String>();
							DataFormatter formatter = new DataFormatter();
							Iterator cells = row.cellIterator();
							ArrayList<String> data = new ArrayList<String>();

							while (cells.hasNext()) {
								// creating formatter using the default
								// locale
								HSSFCell cell = (HSSFCell) cells.next();

								// String no=countryCode.trim().split("/")[0];
								// response.getWriter().println("Value after splir "+no);
								if (nodeName == ""
										&& !pr.hasNode(formatter
												.formatCellValue(cell))) {
									response.getWriter()
											.println(
													" goingt to Add------------"
															+ formatter
																	.formatCellValue(cell));
									node = pr.addNode(formatter
											.formatCellValue(cell));
									// response.getWriter().println(" Added"+countryCode);
								} else {
									response.getWriter()
											.println(
													"Not Added"
															+ formatter
																	.formatCellValue(cell));
								}

								if (x < 6) {

									switch (x) {
									case 0:

										node.setProperty("distcode",
												formatter.formatCellValue(cell));

										nodeName = formatter
												.formatCellValue(cell);
										// node.setProperty("prd_code", s + 1);

										break;
									case 1:

										node.setProperty("distatename",
												formatter.formatCellValue(cell));
										break;
									case 2:
										node.setProperty("distpopulation",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 3:
										node.setProperty("distareakm",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 4:
										node.setProperty("distlatitude",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 5:

										node.setProperty("distlongitude",
												formatter.formatCellValue(cell));
										nodeName = "";
										break;
									}
									x++;
								}
							}

						} else {
							firstRowIgnore = true;
						}
					}
				}

			}

			session.save();
			status = "success";

		} catch (Exception e) {
			// response.getWriter().print(e.getMessage()+"geet");
			status = e.getMessage() + "sssssssssssss";
			response.getWriter().print(e.getMessage());
		}
		return status;
	}

	// /////////////

	public String readCityView(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws IOException {
		Session session = null;
		Node dcNode, jcrNode, docNode, node = null;
		ArrayList<String> productCodes = new ArrayList<String>();
		String status = "failure";
		try {

			RequestParameter[] apDoc = request.getRequestParameterMap().get(
					"uploadtemplate");
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			Node pr = session.getRootNode().getNode("content")
					.getNode("address").getNode("IN").getNode("MH")
					.getNode("TH");
			// Node pr = pr1.addNode("IN");
			for (int i = 0; i < 1; i++) {
				int a = 0;

				String docfilenam = apDoc[i].getFileName();
				if (docfilenam != null && !docfilenam.equals("")) {
					InputStream isp = apDoc[i].getInputStream();
					HSSFWorkbook workbook = new HSSFWorkbook(isp);
					HSSFSheet sheet = workbook.getSheetAt(0);
					Iterator rows = sheet.rowIterator();
					int x = 0;
					boolean firstRowIgnore = false;
					String nodeName = "";
					int nodeNum = 10;
					while (rows.hasNext()) {
						HSSFRow row = (HSSFRow) rows.next();
						if (firstRowIgnore) {
							x = 0;
							a = 0;
							firstRowIgnore = true;
							TemplateDataBean t = new TemplateDataBean();
							ArrayList<String> at = new ArrayList<String>();
							ArrayList<String> fat = new ArrayList<String>();
							DataFormatter formatter = new DataFormatter();
							Iterator cells = row.cellIterator();
							ArrayList<String> data = new ArrayList<String>();

							while (cells.hasNext()) {
								// creating formatter using the default
								// locale
								HSSFCell cell = (HSSFCell) cells.next();

								// String no=countryCode.trim().split("/")[0];
								// response.getWriter().println("Value after splir "+no);
								if (nodeName == ""
										&& !pr.hasNode(String.valueOf(nodeNum))) {

									node = pr.addNode(String.valueOf(nodeNum));
									response.getWriter().println(
											"mode no if==="
													+ String.valueOf(nodeNum));
									node.setProperty("citycode",
											String.valueOf(nodeNum));

									nodeName = String.valueOf(nodeNum);
									// response.getWriter().println(" Added"+countryCode);
								} else {
									response.getWriter().println(
											"mode no if else==="
													+ String.valueOf(nodeNum));
								}

								if (x < 6) {

									switch (x) {
									case 0:

										node.setProperty("cityname",
												formatter.formatCellValue(cell));

										// node.setProperty("prd_code", s + 1);

										break;
									case 1:

										node.setProperty("citypincode",
												formatter.formatCellValue(cell));
										break;
									case 2:
										node.setProperty("citypopulation",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 3:
										node.setProperty("cityareakm",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 4:
										node.setProperty("citylatitude",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 5:

										node.setProperty("citylongitude",
												formatter.formatCellValue(cell));
										nodeName = "";
										break;
									}
									x++;
								}
							}
							nodeNum++;
						} else {
							firstRowIgnore = true;
						}
					}
				}

			}

			session.save();
			status = "success";

		} catch (Exception e) {
			// response.getWriter().print(e.getMessage()+"geet");
			status = e.getMessage() + "sssssssssssss";
			response.getWriter().print(e.getMessage());
		}
		return status;
	}

	// /////////////

	public String readPincodeView(SlingHttpServletRequest request,
			SlingHttpServletResponse response) throws IOException {
		Session session = null;
		Node dcNode, jcrNode, docNode, node = null;
		ArrayList<String> productCodes = new ArrayList<String>();
		String status = "failure";
		try {

			RequestParameter[] apDoc = request.getRequestParameterMap().get(
					"uploadtemplate");
			session = repo.login(new SimpleCredentials("admin", "admin"
					.toCharArray()));

			Node pr = session.getRootNode().getNode("content")
					.getNode("pincode");
			// Node pr = pr1.addNode("IN");
			for (int i = 0; i < 1; i++) {
				int a = 0;

				String docfilenam = apDoc[i].getFileName();
				if (docfilenam != null && !docfilenam.equals("")) {
					InputStream isp = apDoc[i].getInputStream();
					HSSFWorkbook workbook = new HSSFWorkbook(isp);
					HSSFSheet sheet = workbook.getSheetAt(0);
					Iterator rows = sheet.rowIterator();
					int x = 0;
					boolean firstRowIgnore = false;
					String nodeName = "";
					while (rows.hasNext()) {
						HSSFRow row = (HSSFRow) rows.next();
						if (firstRowIgnore) {
							x = 0;
							a = 0;
							firstRowIgnore = true;
							TemplateDataBean t = new TemplateDataBean();
							ArrayList<String> at = new ArrayList<String>();
							ArrayList<String> fat = new ArrayList<String>();
							DataFormatter formatter = new DataFormatter();
							Iterator cells = row.cellIterator();
							ArrayList<String> data = new ArrayList<String>();

							while (cells.hasNext()) {
								// creating formatter using the default
								// locale
								HSSFCell cell = (HSSFCell) cells.next();

								// String no=countryCode.trim().split("/")[0];
								// response.getWriter().println("Value after splir "+no);
								if (nodeName == ""
										&& !pr.hasNode(formatter
												.formatCellValue(cell))) {
									response.getWriter()
											.println(
													" goingt to Add------------"
															+ formatter
																	.formatCellValue(cell));
									node = pr.addNode(formatter
											.formatCellValue(cell));
									// response.getWriter().println(" Added"+countryCode);
								} else {
									response.getWriter()
											.println(
													"Not Added"
															+ formatter
																	.formatCellValue(cell));
								}

								if (x < 6) {

									switch (x) {
									case 0:

										node.setProperty("pincode",
												formatter.formatCellValue(cell));

										nodeName = formatter
												.formatCellValue(cell);
										// node.setProperty("prd_code", s + 1);

										break;
									case 1:

										node.setProperty("countrycode",
												formatter.formatCellValue(cell));
										break;
									case 2:
										node.setProperty("statecode",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 3:
										node.setProperty("districtcode",
												formatter.formatCellValue(cell));
										// nodeName="";
										break;
									case 4:
										node.setProperty("citycode",
												formatter.formatCellValue(cell));
										nodeName = "";
										break;

									}
									x++;
								}
							}

						} else {
							firstRowIgnore = true;
						}
					}
				}

			}

			session.save();
			status = "success";

		} catch (Exception e) {
			// response.getWriter().print(e.getMessage()+"geet");
			status = e.getMessage() + "sssssssssssss";
			response.getWriter().print(e.getMessage());
		}
		return status;
	}

}