package biz.com.service.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;

import javax.jcr.LoginException;
import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;
import javax.jcr.Workspace;
import javax.jcr.query.Query;
import javax.jcr.query.QueryResult;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Properties;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;
import org.apache.sling.commons.json.JSONException;
import org.apache.sling.commons.json.JSONObject;
import org.apache.sling.jcr.api.SlingRepository;

import biz.com.service.PersonService;


/**
 * 
 * @author atul
 */
@Component(configurationFactory = true)
@Service(PersonService.class)
@Properties({ @Property(name = "com", value = "com") })
public class PersonServiceImpl implements PersonService{

	/** The repo variable is an object of SlingRepository interface. */

	@Reference
	private SlingRepository repo;

	Session session = null;
	public ArrayList<Node> getPersonList(String searchText) {
ArrayList<Node> pb = null;
		
		Node tempPrdNode, childNode;
		
		if (!searchText.trim().equals("")) {
			try {

				pb = new ArrayList<Node>();
				session = repo.login(new SimpleCredentials("admin", "admin"
						.toCharArray()));

				String querryStr = "select * from [nt:unstructured] where  ISDESCENDANTNODE('/content/user/') and name  like '"
						+ searchText+ "%'";
				Workspace workspace = session.getWorkspace();
				Query query = workspace.getQueryManager().createQuery(
						querryStr, Query.JCR_SQL2);
				QueryResult result = query.execute();
				NodeIterator iterator = result.getNodes();
				
				while (iterator.hasNext()) {
					
					tempPrdNode = iterator.nextNode();						
							pb.add(tempPrdNode);
							
				}

			} catch (LoginException e) {

			} catch (RepositoryException e) {
				// TODO Auto-generated catch block

			} catch (Exception e) {
				// TODO Auto-generated catch block

			}
		}
		return pb;
	}
	 private  String readAll(Reader rd) throws IOException {
		    StringBuilder sb = new StringBuilder();
		    int cp;
		    while ((cp = rd.read()) != -1) {
		      sb.append((char) cp);
		    }
		    return sb.toString();
		  }

	 public  String readJsonFromUrl(String url){
		    InputStream is=null;
		    JSONObject json=null;
			try {
				is = new URL(url).openStream();
			BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
		      String jsonText = this.readAll(rd);
		       json = new JSONObject(jsonText);
		       if(!json.getJSONObject("facet_counts").getJSONObject("facet_fields").getJSONArray("v_keyword1").isNull(1)){
		    	   return json.getJSONObject("facet_counts").getJSONObject("facet_fields").getJSONArray("v_keyword1").getString(1);   
		       }
		       return "0";
				
				
		    } catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return e.getMessage();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				return e.getMessage();
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				return e.getMessage();
			}finally {
		      try {
				is.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    }   
				
			
		  }
}
